apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: {{ .Values.global.env }}-serverless-registry-api
  labels:
    app: serverless-registry-api
    component: api
    env: {{ .Values.global.env }}
spec:
  replicas: 1
  selector:
    app: serverless-registry-api
    component: api
    env: {{ .Values.global.env }}
  triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        containerNames:
          - api
        from:
          kind: ImageStreamTag
          name: {{ .Values.global.env }}-serverless-registry-api:{{ .Values.global.env }}-latest
  template:
    metadata:
      labels:
        app: serverless-registry-api
        component: api
        env: {{ .Values.global.env }}
    spec:
      volumes:
        - name: gh-api-configuration
          secret:
            secretName: {{ .Values.global.env }}-gh-api-configuration
        - name: proxy-config
          configMap:
            name: {{ .Values.global.env }}-serverless-registry-api-proxy-config
      containers:
        - name: proxy
          image: docker.io/kscout/caddy:v0.2.0
          volumeMounts:
            - name: proxy-config
              mountPath: /mnt
          ports:
            - name: proxy-http
              containerPort: 5001
              protocol: TCP
            - name: proxy-metrics
              containerPort: 9180
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: proxy-http
              scheme: HTTP
          readinessProbe:
            httpGet:
              path: /health
              port: proxy-http
              scheme: HTTP
        - name: api
          image: docker.io/kscout/serverless-registry-api:{{ .Values.global.env }}-latest
          env:
            - name: APP_EXTERNAL_URL
              value: https://{{ template "serverless-registry-api.host" . }}
            - name: APP_HTTP_ADDR
              value: ":5000"
            - name: APP_DB_USER
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.env }}-mongo-config
                  key: user
            - name: APP_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.env }}-mongo-credentials
                  key: password
            - name: APP_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.env }}-mongo-config
                  key: dbName
            - name: APP_DB_HOST
              value: {{ .Values.global.env | upper }}_SERVERLESS_REGISTRY_API_MONGO_SERVICE_HOST
            - name: APP_GH_PRIVATE_KEY_PATH
              value: /mnt/gh-api-config/privateKey
            - name: APP_GH_INTEGRATION_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.env }}-gh-api-configuration
                  key: ghIntegrationID
            - name: APP_GH_INSTALLATION_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.env }}-gh-api-configuration
                  key: ghInstallationID
            - name: APP_GH_WEBHOOK_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.env }}-gh-api-configuration
                  key: webhookSecret
          volumeMounts:
            - name: gh-api-configuration
              mountPath: /mnt/gh-api-config
              readOnly: true
          ports:
            - name: api-http
              containerPort: 5000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: api-http
              scheme: HTTP
          readinessProbe:
            httpGet:
              path: /health
              port: api-http
              scheme: HTTP
