apiVersion: v1
kind: Template
metadata:
  name: serverless-registry-api
parameters:
  - name: ENV
    description: Environment
    required: True
  - name: API_IMAGE_REPOSITORY
    description: API Docker image source repository, include registry host
    required: Teu
  - name: API_IMAGE_TAG
    description: API Docker image tag to track
    required: True
objects:
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      name: ${ENV}-serverless-registry-api
      labels:
        app: serverless-registry-api
        component: image-stream
        env: ${ENV}
    spec:
      dockerImageRepository: ${API_IMAGE_REPOSITORY}
      tags:
        - from:
            kind: DockerImage
            name: ${API_IMAGE_REPOSITORY}:${API_IMAGE_TAG}
          name: ${API_IMAGE_TAG}
          importPolicy:
            scheduled: true
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: ${ENV}-serverless-registry-api-mongo
      labels:
        app: serverless-registry-api
        component: mongo
        env: ${ENV}
    spec:
      selector:
        matchLabels:
          app: serverless-registry-api
          component: mongo
          env: ${ENV}
      serviceName: ${ENV}-mongo
      replicas: 1
      template:
        metadata:
          labels:
            app: serverless-registry-api
            component: mongo
            env: ${ENV}
        spec:
          containers:
            - name: mongo
              image: mongo:latest
              env:
                - name: MONGO_INITDB_ROOT_USERNAME
                  valueFrom:
                    configMapKeyRef:
                      name: ${ENV}-mongo-config
                      key: user
                - name: MONGO_INITDB_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${ENV}-mongo-credentials
                      key: password
                - name: MONGO_INITDB_DATABASE
                  valueFrom:
                    configMapKeyRef:
                      name: ${ENV}-mongo-config
                      key: dbName
              ports:
                - name: mongo
                  containerPort: 27017
              volumeMounts:
                - name: ${ENV}-serverless-registry-api-mongo
                  mountPath: /data/db
      volumeClaimTemplates:
      - metadata:
          name: ${ENV}-serverless-registry-api-mongo
          labels:
            app: serverless-registry-api
            component: mongo
            env: ${ENV}
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${ENV}-serverless-registry-api-mongo
      labels:
        app: serverless-registry-api
        component: mongo
        env: ${ENV}
    spec:
      selector:
        app: serverless-registry-api
        component: mongo
        env: ${ENV}
      ports:
        - port: 27017
          name: mongo
          targetPort: mongo
          protocol: TCP
