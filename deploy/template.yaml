apiVersion: v1
kind: Template
metadata:
  name: serverless-registry-api
parameters:
  - name: ENV
    description: Environment
    required: True
  - name: API_IMAGE_SOURCE
    description: API Docker image source repository, include registry host (ex., quay.io/kscout/foo)
    required: True
  - name: API_IMAGE_REPOSITORY
    description: Name of Docker image, do not include registry host (ex., kscout/foo)
  - name: API_IMAGE_TAG
    description: API Docker image tag to track
    required: True
  - name: HOST
    description: Host under which API will be served
    required: True
  - name: DB_HOST
    description: Database host
    required: True
objects:
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      name: ${ENV}-serverless-registry-api
      labels:
        app: serverless-registry-api
        component: image-stream
        env: ${ENV}
    spec:
      dockerImageRepository: ${API_IMAGE_SOURCE}
      tags:
        - from:
            kind: DockerImage
            name: ${API_IMAGE_SOURCE}:${API_IMAGE_TAG}
          name: ${API_IMAGE_TAG}
          importPolicy:
            scheduled: true
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: ${ENV}-serverless-registry-api-mongo
      labels:
        app: serverless-registry-api
        component: mongo
        env: ${ENV}
    spec:
      selector:
        matchLabels:
          app: serverless-registry-api
          component: mongo
          env: ${ENV}
      serviceName: ${ENV}-mongo
      replicas: 1
      template:
        metadata:
          labels:
            app: serverless-registry-api
            component: mongo
            env: ${ENV}
        spec:
          containers:
            - name: mongo
              image: mongo:latest
              env:
                - name: MONGO_INITDB_ROOT_USERNAME
                  valueFrom:
                    configMapKeyRef:
                      name: ${ENV}-mongo-config
                      key: user
                - name: MONGO_INITDB_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${ENV}-mongo-credentials
                      key: password
                - name: MONGO_INITDB_DATABASE
                  valueFrom:
                    configMapKeyRef:
                      name: ${ENV}-mongo-config
                      key: dbName
              ports:
                - name: mongo
                  containerPort: 27017
              volumeMounts:
                - name: ${ENV}-serverless-registry-api-mongo
                  mountPath: /data/db
      volumeClaimTemplates:
      - metadata:
          name: ${ENV}-serverless-registry-api-mongo
          labels:
            app: serverless-registry-api
            component: mongo
            env: ${ENV}
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${ENV}-serverless-registry-api-mongo
      labels:
        app: serverless-registry-api
        component: mongo
        env: ${ENV}
    spec:
      selector:
        app: serverless-registry-api
        component: mongo
        env: ${ENV}
      ports:
        - port: 27017
          name: mongo
          targetPort: mongo
          protocol: TCP
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: ${ENV}-serverless-registry-api
      labels:
        app: serverless-registry-api
        component: api
        env: ${ENV}
    spec:
      replicas: 1
      selector:
        app: serverless-registry-api
        component: api
        env: ${ENV}
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            containerNames:
              - serverless-registry-api
            from:
              kind: ImageStreamTag
              name: serverless-registry-api:${API_IMAGE_TAG}
      template:
        metadata:
          labels:
            app: serverless-registry-api
            component: api
            env: ${ENV}
        spec:
          volumes:
            - name: gh-api-configuration
              secret:
                secretName: ${ENV}-gh-api-configuration
          containers:
            - name: serverless-registry-api
              image: ${API_IMAGE_SOURCE}:${API_IMAGE_TAG}
              env:
                - name: APP_HTTP_ADDR
                  value: ":5000"
                - name: APP_DB_USER
                  valueFrom:
                    configMapKeyRef:
                      name: ${ENV}-mongo-config
                      key: user
                - name: APP_DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${ENV}-mongo-credentials
                      key: password
                - name: APP_DB_NAME
                  valueFrom:
                    configMapKeyRef:
                      name: ${ENV}-mongo-config
                      key: dbName
                - name: APP_DB_HOST
                  value: ${DB_HOST}
                - name: APP_GH_PRIVATE_KEY_PATH
                  value: /mnt/gh-api-config/privateKey
                - name: APP_GH_INTEGRATION_ID
                  valueFrom:
                    secretKeyRef:
                      name: ${ENV}-gh-api-configuration
                      key: ghIntegrationID
                - name: APP_GH_INSTALLATION_ID
                  valueFrom:
                    secretKeyRef:
                      name: ${ENV}-gh-api-configuration
                      key: ghInstallationID
                - name: APP_GH_WEBHOOK_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: ${ENV}-gh-api-configuration
                      key: webhookSecret
              volumeMounts:
                - name: gh-api-configuration
                  mountPath: /mnt/gh-api-config
                  readOnly: true
              ports:
                - name: http
                  containerPort: 5000
                  protocol: TCP
              livenessProbe:
                httpGet:
                  path: /health
                  port: http
                  scheme: HTTP
              readinessProbe:
                httpGet:
                  path: /health
                  port: http
                  scheme: HTTP              
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${ENV}-serverless-registry-api
      labels:
        app: serverless-registry-api
        component: api
        env: ${ENV}
    spec:
      type: ClusterIP
      selector:
        app: serverless-registry-api
        component: api
        env: ${ENV}
      ports:
        - protocol: TCP
          port: 80
          targetPort: http
          name: http
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: ${ENV}-serverless-registry-api
      labels:
        app: serverless-registry-api
        component: api
        env: ${ENV}
    spec:
      host: ${HOST}
      path: /
      to:
        kind: Service
        name: ${ENV}-serverless-registry-api
        weight: 100
      port:
        targetPort: http
      tls:
        termination: edge
    status:
      ingress:
        - host: ${HOST}          
